---
title: "Reproducibility Supplement"
toc-title: Data Analysis Workflow
toc-location: left
code-annotations: hover
code-fold: true
code-overflow: wrap
---

## Dependencies

### Install Packages

```{r}
#| label: install-packages
#| code-fold: false
#| eval: false
install.packages(c("fs", "tidyverse", "rmarkdown"))
```

### Load Libraries

```{r}
#| label: load-libraries
#| code-fold: false
library(fs)
library(tidyverse)
library(rmarkdown)
```

## Helper Functions

### Loading

```{r}
#| code-summary: load_csv_data() Function 
load_csv_data <- function(dir_path, glob_pattern) {
  dfs <- fs::dir_ls(path = dir_path, glob = glob_pattern) %>%
    purrr::set_names(gsub("^.*/|\\.csv$", "", 
                              fs::path_rel(., dir_path))) %>%
    purrr::set_names(gsub("-", "_", names(.))) %>% 
    purrr::map(read.csv) 
}
```

### Tidying

```{r}
#| code-summary: convert_vars_to_lower() Function 
convert_vars_to_lower <- function(df) {
  df %>% rename_with(.fn = tolower)
}
```

```{r}
#| code-summary: set_col_names() Function 
set_col_names <- function(df, col_names_vec) {
  setNames(df, col_names_vec)
}
```

```{r}
filter_years <- function(df, year_col_name) {
  df %>% 
    filter(between(!!sym(year_col_name), 2005, 2017))
}
```

```{r}
#| code-summary: tidy_proxy_site_coords() Function 
tidy_proxy_site_coords <- function(df, col_names) {
  df <- df %>% 
    convert_vars_to_lower() %>% 
    dplyr::select(-c(x.1, x.2, x.5, x.6, x.7, x.9, x.11, x.13, x.14,
                   x.15, x.17, x.18, x.20)) %>% 
    mutate(across(where(is.character), ~na_if(., ""))) %>% 
    filter(!rowSums(is.na(.)) == ncol(.)) %>% 
    set_col_names(col_names) %>% 
    mutate(
      status = case_when(
        site_number == "Active" ~ "Active",
        site_number == "Inactive" ~ "Inactive",
        TRUE ~ NA_character_),
      site_type = case_when(
        site_type == "Day-use Developed Site" ~ "DUDS",
        site_type == "Overnight-use Developed Site" ~ "OUDS",
        site_type == "General Forest Area" ~ "GFA",
        site_type == "View Corridor" ~ "VIEWCORR",
        site_type == "Wilderness" ~ "WILDERNESS",
        TRUE ~ NA_character_
      ),
      forest_name = gsub(" NF", "", forest_name)
      ) %>% 
    mutate(
      across(where(is.character), as.factor), 
      round = as.factor(round)
    ) %>% 
    fill(c(site_type, status, forest_name, round)) %>% 
    filter(!site_number %in% c("Site Locations", "Active", "Inactive", NA)) 
    # filter_years(year)
}
```

```{r}
#| code-summary: tidy_proxy_vis_counts() Function 
tidy_proxy_vis_counts <- function(inyo_sierra_stanislaus_df, sequoia_df) {
  inyo_sierra_stanislaus_df_tidied <- inyo_sierra_stanislaus_df %>% 
    convert_vars_to_lower() %>% 
    rename("round" = proxy,
           "yearly_visits" = total_proxy_visits) %>% 
    pivot_longer(cols = 11:14, names_to = 'season',
                 values_to = "seasonal_visits") %>%
    filter_years(year) %>% 
    mutate(season = case_when(season == 'apr_jun' ~ 'Spring',
                              season == 'jul_sep' ~ "Summer",
                              season == 'oct_dec' ~ "Fall",
                              season == 'jan_mar' ~ "Winter"),
           forest_name = case_when(aforest_code == 'A05004' ~ "Inyo",
                                   aforest_code == 'A05015' ~ "Sierra",
                                   aforest_code == 'A05016' ~ "Stanislaus")) %>% 
    dplyr::select(forest_name, year, season, site_number, site_name, rd_code, 
                  site_type, round, seasonal_visits)
  
   sequoia_df_tidied <- raw_dfs$sequoia_nvum_proxy_vis_counts %>% 
    convert_vars_to_lower() %>% 
    rename("round" = survey_round,
           "yearly_visits" = total,
           "site_number" = sitenumber, 
           "site_name" = sitename, 
           "site_type" = sitetype) %>%
    pivot_longer(cols = 10:13, names_to = 'season',
                 values_to = "seasonal_visits") %>%
    mutate(year = case_when(round == 2 ~ 2006,
                            round == 3 ~ 2011,
                            round == 4 ~ 2016),
           season = case_when(season == 'apr_jun' ~ 'Spring',
                              season == 'jul_sep' ~ "Summer",
                              season == 'oct_dec' ~ "Fall",
                              season == 'jan_mar' ~ "Winter"),
           forest_name = "Sequoia") %>%
     filter_years("year") %>% 
    dplyr::select(forest_name, year, season, site_number, site_name, rd_code, 
                  site_type, round, seasonal_visits)
}
```


## Import Raw Data

```{r}
#| code-fold: false
raw_dfs <- load_csv_data(dir_path = "data/raw",
                         glob_pattern = "*.csv")
```

## Data Collection

## Data Tidying

::: {.panel-tabset}

### NVUM

```{r}
#| code-summary: Proxy Site Coordinates Tidied
proxy_site_coords_tidied <- map_dfr(raw_dfs[c(1, 3, 5, 6)], ~tidy_proxy_site_coords(.x, col_names = c("site_number", "site_type", "site_name", "forest_name", "rd_code", "lat", "lon", "round")))

paged_table(proxy_site_coords_tidied)
```

```{r}
#| code-summary: Proxy Visitation Counts Tidied
# proxy_vis_counts_tidied <- map_dfr(raw_dfs[c(1, 3, 5, 6)], ~tidy_proxy_vis_counts(.x))

# paged_table()
```

```{r}
#| code-summary: Proxy Site Coordinates and Visitation Counts Merged
# Placeholder text
```


### CDEC

### gridMET

### TerraClimate

### CAL FIRE

### NTD

### Harvard Dataverse

:::

### Data Dictionary

## Data Preprocessing

## Model Building

## Model Evaluation

## Visualizations

## Computational Environment

```{r}
#| label: computational-env
#| echo: false
devtools::session_info()
```
